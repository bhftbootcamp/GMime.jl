var documenterSearchIndex = {"docs":
[{"location":"#GMime.jl","page":"Home","title":"GMime.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GMime is a convenient wrapper around the GMime library for parsing email messages in Julia. It can extract sender, recipient, date, body text, attachments and other email information.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install GMime, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add Gmime","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's a small example of how to parse content from an email body:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GMime\nusing EasyCurl\n\n# Fetch the email data from an IMAP server\nresponse = imap_request(\n    \"imaps://imap.gmail.com:993\",\n    get(ENV, \"IMAP_USER\", \"\"),\n    get(ENV, \"IMAP_PASSWORD\", \"\"),\n    mailbox = \"INBOX\",\n    path = \"MAILINDEX=993\"\n)\n\n# Extract the raw email body\ndata = imap_body(response)\n\n# Parse the email using GMime\njulia> email = parse_email(data)\n📧 Email:\n   📤 From: Broker Support <support@broker.com>\n   📥 To: Portfolio Manager <pm@hedgefund.com>\n   🕒 Date: 2024-08-06T17:34:04\n   📎 Attachments:\n      1. 📎 Attachment:\n   📄 Name: CashFlowReport_Q3_2024.pdf\n   🛠️ Encoding: base64\n   🏷 Mime type: application/pdf\n   📏 Size: 18000 bytes\n\n      2. 📎 Attachment:\n   📄 Name: ClosedPositions_Summary_2024-08-06.csv\n   🛠️ Encoding: base64\n   🏷 Mime type: text/csv\n   📏 Size: 250000 bytes\n\n      3. 📎 Attachment:\n   📄 Name: DailyTransaction_2024-08-06.csv\n   🛠️ Encoding: base64\n   🏷 Mime type: text/csv\n   📏 Size: 12800 bytes","category":"page"},{"location":"#Useful-Links","page":"Home","title":"Useful Links","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Turn on the IMAP support at email provider cabinet. See this Gmail guide.\nCreate an app-specific password for your email. See here for details.","category":"page"},{"location":"pages/api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"pages/api_reference/#Structures","page":"API Reference","title":"Structures","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"    Email\n    EmailAttachment","category":"page"},{"location":"pages/api_reference/#GMime.Parser.Email","page":"API Reference","title":"GMime.Parser.Email","text":"Email\n\nEmail structure with metadata and attachments.\n\nFields\n\nfrom::Vector{String}: Vector of the email sender(s) addresses.\nto::Vector{String}: Vector of the email recipient(s) addresses.\ndate::DateTime: The date and time the email was sent.\ntext_body::Vector{UInt8}: Binary data of the email's text body.\nattachments::Vector{EmailAttachment}: Vector of the email attachments with metadata.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#GMime.Parser.EmailAttachment","page":"API Reference","title":"GMime.Parser.EmailAttachment","text":"EmailAttachment\n\nFields\n\nname::String: The attachment's file name.\nencoding::String: The encoding type of the attachment.\nmime_type::String: The attachment's MIME type.\nbody::Vector{UInt8}: Binary data of the attachment.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#Parsing","page":"API Reference","title":"Parsing","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"    parse_email","category":"page"},{"location":"pages/api_reference/#GMime.Parser.parse_email","page":"API Reference","title":"GMime.Parser.parse_email","text":"parse_email(data::Vector{UInt8}) -> Email\nparse_email(data::String) -> Email\n\nParse a binary vector or string data into an Email.\n\nExample\n\njulia> email_string = \"\"\"\n       MIME-Version: 1.0\n       Date: Tue, 5 Mar 1996 11:00:00 +0300\n       Message-ID: <CAOU+8LMfxVaPMmigMQE2qTBLSbNdKQVps=Fi0S3X8LnfxT2xee@mail.email.com>\n       Subject: Test Message\n       From: Test User <username@example.com>\n       To: Test User <username@example.com>\n       Content-Type: multipart/alternative; boundary=\"000000000000dd23a50621ff39e8\"\n       \n       --000000000000dd23a50621ff39e8\n       Content-Type: text/plain; charset=\"UTF-8\"\n       \n       Hello World!\n       \n       Best regards,\n       Test User\n       \n       --000000000000dd23a50621ff39e8\n       Content-Type: text/html; charset=\"UTF-8\"\n       \n       <div dir=\"ltr\">Hello World!<div><br></div><div>Best regards,</div><div>Test User</div></div>\n       \n       --000000000000dd23a50621ff39e8--\n       \"\"\";\n\njulia> email = parse_email(email_string)\n📧 Email:\n   📤 From: Test User <username@example.com>\n   📥 To: Test User <username@example.com>\n   🕒 Date: 1996-03-05T11:00:00\n   📝 Text size: 39 bytes\n   📨 No attachments.\n\n\n\n\n\n","category":"function"}]
}
